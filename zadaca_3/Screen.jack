/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen
{
    static Array screen;
    static boolean currentColor;



    /** Initializes the Screen. */
    function void init()
    {
        let screen = 16384;
        let currentColor = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen()
    {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b)
    {
        var int i;
        while(i < 8192)
        {
            let screen[i] = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y)
    {
        var int address, value, pos, pow, i;
        let address = (32 * y) + (x / 16);
        let value = screen[address];  //Memory.peek(16384 + address);
        let pos = x - ((x / 16) * 16); //x%16

        let pow = 1;
        let i = 0;
        while (i < pos)
        {
            let pow = pow * 2;
            let i = i + 1;
        }

        if (currentColor)
        {
            let value = value | pow;
        }
        else
        {
            let value = value & (~pow);
        }

        let screen[address] = value; //Memory.poke(16384 + address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, stepX, stepY;
        
        let dx = x2 - x1;
        let dy = y2 - y1;
        
        do Screen.drawPixel(x1, y1);
        
        if (dy = 0) {
            if (dx > 0) {
                while (a < dx) {
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a + 1;
                }
            } else {
                let dx = -dx;
                while (a < dx) {
                    do Screen.drawPixel(x1 - a, y1);
                    let a = a + 1;
                }
            }
            
            return;
        }
        
        if (dy > 0) {
            if (dx > 0) {
                while (~((a > dx) | (b > dy))) {
                    do Screen.drawPixel(x1+a, y1+b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            } else {
                let dx = -dx;
                while (~((a > dx) | (b > dy))) {
                    do Screen.drawPixel(x1-a, y1+b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }
        } else {
            let dy = -dy;
            if (dx > 0) {
                while (~((a > dx) | (b > dy))) {
                    do Screen.drawPixel(x1+a, y1-b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            } else {
                let dx = -dx;
                while (~((a > dx) | (b > dy))) {
                    do Screen.drawPixel(x1-a, y1-b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }
        }
        
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2)
    {
        //  1    3
        //  4    2
        var int x3, y3, x4, y4;
        let x3 = x2;
        let y3 = y1;
        let x4 = x1;
        let y4 = y2;

        do Screen.drawLine(x1, y1, x3, y3);
        do Screen.drawLine(x3, y3, x2, y2);
        do Screen.drawLine(x2, y2, x4, y4);
        do Screen.drawLine(x4, y4, x1, y1);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r)
    {
        var int dx, dy, k, x_left, x_right, y_;
        let dy = -r;
        while(~(dy > r))
        {
            let y_ = y + dy;
            let k = Math.sqrt(Math.multiply(r,r) - Math.multiply(dy, dy));
            let x_left = x - k;
            let x_right = x + k;

            do Screen.drawLine(x_left, y_, x_right, y_);
            let dy = dy + 1;            
        }
        return;
    }
}